# name: Genius CI/CD file
# on:
#   push:
#     branches:
#       - main

# jobs:
#   lint:
#     runs-on: ubuntu-22.04
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - name: Install deps
#         run: npm ci
#       - name: Cache deps
#         uses: actions/cache@v3
#         with:
#           path: ~/.npm
#           key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-npm-
#       - name: Lint
#         run: npm run lint
#       - run: echo "lint job done"
#   test:
#     needs: [lint]
#     strategy:
#       matrix:
#         version: [14, 16, 18]
#     runs-on: ubuntu-22.04
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - uses: actions/setup-node@v3
#         with:
#           node-version: ${{ matrix.version }}
#       - name: Cache deps
#         uses: actions/cache@v3
#         with:
#           path: ~/.npm
#           key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-npm-
#       - name: Test
#         run: npm run test -- --timeout=4000
#       - run: echo "test job done"
#   build_deploy:
#     needs: [test]
#     runs-on: ubuntu-22.04
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - name: Build
#         run: npm run build
#       - name: Deploying
#         run: ./deploy.sh
#       - run: echo "that's all"

name: build

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Setup Doppler
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          sudo doppler setup --project test-project --config github
          sudo doppler secrets download --no-file --format env > .doppler.env
          source .doppler.env

      - name: Install dependencies
        run: |
          pip install --no-cache-dir -r requirements.txt
          npm ci --ignore-scripts  

      - name: Run tests
        run: python -m unittest discover tests

      - name: Deploy
        run: |
          rsync -avz --delete dist/ ${SSH_USER}@${SERVER_HOST}:${DEPLOY_PATH}
        env:
          SECRET_KEY: ${{ env.SECRET_KEY }}